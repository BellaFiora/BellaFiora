{"version":3,"sources":["../lib/hashids.js"],"names":[],"mappings":"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","file":"hashids.mjs","sourcesContent":["\nexport default class Hashids {\n\n\tconstructor(salt = '', minLength = 0, alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890') {\n\n\t\tconst minAlphabetLength = 16;\n\t\tconst sepDiv = 3.5;\n\t\tconst guardDiv = 12;\n\n\t\tconst errorAlphabetLength = 'error: alphabet must contain at least X unique characters';\n\t\tconst errorAlphabetSpace = 'error: alphabet cannot contain spaces';\n\n\t\tlet uniqueAlphabet = '', sepsLength, diff;\n\n\t\t/* funcs */\n\n\t\tthis.escapeRegExp = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n\t\tthis.parseInt = (v, radix) => (/^(-|\\+)?([0-9]+|Infinity)$/.test(v)) ? parseInt(v, radix) : NaN;\n\n\t\t/* alphabet vars */\n\n\t\tthis.seps = 'cfhistuCFHISTU';\n\t\tthis.minLength = parseInt(minLength, 10) > 0 ? minLength : 0;\n\t\tthis.salt = (typeof salt === 'string') ? salt : '';\n\n\t\tif (typeof alphabet === 'string') {\n\t\t\tthis.alphabet = alphabet;\n\t\t}\n\n\t\tfor (let i = 0; i !== this.alphabet.length; i++) {\n\t\t\tif (uniqueAlphabet.indexOf(this.alphabet.charAt(i)) === -1) {\n\t\t\t\tuniqueAlphabet += this.alphabet.charAt(i);\n\t\t\t}\n\t\t}\n\n\t\tthis.alphabet = uniqueAlphabet;\n\n\t\tif (this.alphabet.length < minAlphabetLength) {\n\t\t\tthrow errorAlphabetLength.replace('X', minAlphabetLength);\n\t\t}\n\n\t\tif (this.alphabet.search(' ') !== -1) {\n\t\t\tthrow errorAlphabetSpace;\n\t\t}\n\n\t\t/*\n\t\t\t`this.seps` should contain only characters present in `this.alphabet`\n\t\t\t`this.alphabet` should not contains `this.seps`\n\t\t*/\n\n\t\tfor (let i = 0; i !== this.seps.length; i++) {\n\n\t\t\tconst j = this.alphabet.indexOf(this.seps.charAt(i));\n\t\t\tif (j === -1) {\n\t\t\t\tthis.seps = this.seps.substr(0, i) + ' ' + this.seps.substr(i + 1);\n\t\t\t} else {\n\t\t\t\tthis.alphabet = this.alphabet.substr(0, j) + ' ' + this.alphabet.substr(j + 1);\n\t\t\t}\n\n\t\t}\n\n\t\tthis.alphabet = this.alphabet.replace(/ /g, '');\n\n\t\tthis.seps = this.seps.replace(/ /g, '');\n\t\tthis.seps = this._shuffle(this.seps, this.salt);\n\n\t\tif (!this.seps.length || (this.alphabet.length / this.seps.length) > sepDiv) {\n\n\t\t\tsepsLength = Math.ceil(this.alphabet.length / sepDiv);\n\n\t\t\tif (sepsLength > this.seps.length) {\n\n\t\t\t\tdiff = sepsLength - this.seps.length;\n\t\t\t\tthis.seps += this.alphabet.substr(0, diff);\n\t\t\t\tthis.alphabet = this.alphabet.substr(diff);\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.alphabet = this._shuffle(this.alphabet, this.salt);\n\t\tconst guardCount = Math.ceil(this.alphabet.length / guardDiv);\n\n\t\tif (this.alphabet.length < 3) {\n\t\t\tthis.guards = this.seps.substr(0, guardCount);\n\t\t\tthis.seps = this.seps.substr(guardCount);\n\t\t} else {\n\t\t\tthis.guards = this.alphabet.substr(0, guardCount);\n\t\t\tthis.alphabet = this.alphabet.substr(guardCount);\n\t\t}\n\n\t}\n\n\tencode(...numbers) {\n\n\t\tconst ret = '';\n\n\t\tif (!numbers.length) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (numbers[0] && numbers[0].constructor === Array) {\n\t\t\tnumbers = numbers[0];\n\t\t\tif (!numbers.length) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i !== numbers.length; i++) {\n\t\t\tnumbers[i] = this.parseInt(numbers[i], 10);\n\t\t\tif (numbers[i] >= 0) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\n\t\treturn this._encode(numbers);\n\n\t}\n\n\tdecode(id) {\n\n\t\tconst ret = [];\n\n\t\tif (!id || !id.length || typeof id !== 'string') {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn this._decode(id, this.alphabet);\n\n\t}\n\n\tencodeHex(hex) {\n\n\t\thex = hex.toString();\n\t\tif (!/^[0-9a-fA-F]+$/.test(hex)) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst numbers = hex.match(/[\\w\\W]{1,12}/g);\n\n\t\tfor (let i = 0; i !== numbers.length; i++) {\n\t\t\tnumbers[i] = parseInt('1' + numbers[i], 16);\n\t\t}\n\n\t\treturn this.encode.apply(this, numbers);\n\n\t}\n\n\tdecodeHex(id) {\n\n\t\tlet ret = [];\n\n\t\tconst numbers = this.decode(id);\n\n\t\tfor (let i = 0; i !== numbers.length; i++) {\n\t\t\tret += (numbers[i]).toString(16).substr(1);\n\t\t}\n\n\t\treturn ret;\n\n\t}\n\n\t_encode(numbers) {\n\n\t\tlet ret,\n\t\t\talphabet = this.alphabet,\n\t\t\tnumbersIdInt = 0;\n\n\t\tfor (let i = 0; i !== numbers.length; i++) {\n\t\t\tnumbersIdInt += (numbers[i] % (i + 100));\n\t\t}\n\n\t\tret = alphabet.charAt(numbersIdInt % alphabet.length);\n\t\tconst lottery = ret;\n\n\t\tfor (let i = 0; i !== numbers.length; i++) {\n\n\t\t\tlet number = numbers[i];\n\t\t\tconst buffer = lottery + this.salt + alphabet;\n\n\t\t\talphabet = this._shuffle(alphabet, buffer.substr(0, alphabet.length));\n\t\t\tconst last = this._toAlphabet(number, alphabet);\n\n\t\t\tret += last;\n\n\t\t\tif (i + 1 < numbers.length) {\n\t\t\t\tnumber %= (last.charCodeAt(0) + i);\n\t\t\t\tconst sepsIndex = number % this.seps.length;\n\t\t\t\tret += this.seps.charAt(sepsIndex);\n\t\t\t}\n\n\t\t}\n\n\t\tif (ret.length < this.minLength) {\n\n\t\t\tlet guardIndex = (numbersIdInt + ret[0].charCodeAt(0)) % this.guards.length;\n\t\t\tlet guard = this.guards[guardIndex];\n\n\t\t\tret = guard + ret;\n\n\t\t\tif (ret.length < this.minLength) {\n\n\t\t\t\tguardIndex = (numbersIdInt + ret[2].charCodeAt(0)) % this.guards.length;\n\t\t\t\tguard = this.guards[guardIndex];\n\n\t\t\t\tret += guard;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfLength = parseInt(alphabet.length / 2, 10);\n\t\twhile (ret.length < this.minLength) {\n\n\t\t\talphabet = this._shuffle(alphabet, alphabet);\n\t\t\tret = alphabet.substr(halfLength) + ret + alphabet.substr(0, halfLength);\n\n\t\t\tconst excess = ret.length - this.minLength;\n\t\t\tif (excess > 0) {\n\t\t\t\tret = ret.substr(excess / 2, this.minLength);\n\t\t\t}\n\n\t\t}\n\n\t\treturn ret;\n\n\t}\n\n\t_decode(id, alphabet) {\n\n\t\tlet ret = [], i = 0,\n\t\t\tr = new RegExp(`[${this.escapeRegExp(this.guards)}]`, 'g'),\n\t\t\tidBreakdown = id.replace(r, ' '),\n\t\t\tidArray = idBreakdown.split(' ');\n\n\t\tif (idArray.length === 3 || idArray.length === 2) {\n\t\t\ti = 1;\n\t\t}\n\n\t\tidBreakdown = idArray[i];\n\t\tif (typeof idBreakdown[0] !== 'undefined') {\n\n\t\t\tconst lottery = idBreakdown[0];\n\t\t\tidBreakdown = idBreakdown.substr(1);\n\n\t\t\tr = new RegExp(`[${this.escapeRegExp(this.seps)}]`, 'g');\n\t\t\tidBreakdown = idBreakdown.replace(r, ' ');\n\t\t\tidArray = idBreakdown.split(' ');\n\n\t\t\tfor (let j = 0; j !== idArray.length; j++) {\n\n\t\t\t\tconst subId = idArray[j];\n\t\t\t\tconst buffer = lottery + this.salt + alphabet;\n\n\t\t\t\talphabet = this._shuffle(alphabet, buffer.substr(0, alphabet.length));\n\t\t\t\tret.push(this._fromAlphabet(subId, alphabet));\n\n\t\t\t}\n\n\t\t\tif (this.encode(ret) !== id) {\n\t\t\t\tret = [];\n\t\t\t}\n\n\t\t}\n\n\t\treturn ret;\n\n\t}\n\n\t_shuffle(alphabet, salt) {\n\n\t\tlet integer;\n\n\t\tif (!salt.length) {\n\t\t\treturn alphabet;\n\t\t}\n\n\t\talphabet = alphabet.split(\"\");\n\n\t\tfor (let i = alphabet.length - 1, v = 0, p = 0, j = 0; i > 0; i--, v++) {\n\n\t\t\tv %= salt.length;\n\t\t\tp += integer = salt.charCodeAt(v);\n\t\t\tj = (integer + v + p) % i;\n\n\t\t\tconst tmp = alphabet[j];\n\t\t\talphabet[j] = alphabet[i];\n\t\t\talphabet[i] = tmp;\n\n\t\t}\n\n\t\talphabet = alphabet.join(\"\");\n\n\t\treturn alphabet;\n\n\t}\n\n\t_toAlphabet(input, alphabet) {\n\n\t\tlet id = '';\n\n\t\tdo {\n\t\t\tid = alphabet.charAt(input % alphabet.length) + id;\n\t\t\tinput = parseInt(input / alphabet.length, 10);\n\t\t} while (input);\n\n\t\treturn id;\n\n\t}\n\n\t_fromAlphabet(input, alphabet) {\n\n\t\treturn input.split(\"\").map(\n\t\t\t(item) => alphabet.indexOf(item)\n\t\t).reduce(\n\t\t\t(carry, item) => carry * alphabet.length + item,\n\t\t\t0\n\t\t);\n\n\t}\n\n}\n"]}