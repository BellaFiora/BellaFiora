from typing import TYPE_CHECKING, Set, List, Optional
if TYPE_CHECKING:
	from .client import Client as OsuClient
	from .channel import Channel as OsuChannel

import re
from ..Utils.regex import ReUserName, ReRoomName

class User(object):
	"""
	This class represents a osu user,
	the same user object might be found in multiple Channel.chatters dict's.

	NOTE: all users from all channels can be found ion Client.users
	NOTE 2: also there are no ID's because why should it, REEEEEEE (i really like ID's... :c)
	NOTE 3*: so names with a space (' ') are replaced with a ('_') in IRC, yeah... keep that in mind, nothing i can do

	```
	* Note 3:
	API        IRC
	---        ---
	The_CJ     The_CJ
	P H Z      P_H_Z
	-] [-      -]_[-
	```

	"""
	def __repr__(self):
		return f"<{self.__class__.__name__} name='{self.name}'>"

	def __str__(self):
		return self.name or ""

	def __init__(self, raw:str or None):
		self._name:Optional[str] = None
		self._generated_via_channel:Optional[str] = None

		self.found_in:Set[str] = set()

		if raw:
			try:
				self.userBuild(raw)

			except:
				raise AttributeError(raw)

	def compact(self) -> dict:
		d:dict = dict()
		d["name"] = self.name
		d["found_in"] = self.found_in
		return d

	# utils
	def userBuild(self, raw:str) -> None:
		"""
		generated by a LEFT or JOIN Event like:

		```
		:The_CJ!cho@ppy.sh JOIN :#osu
		```
		"""

		# _name
		search = re.search(ReUserName, raw)
		if search:
			self._name = search.group(1)

		# _generated_via_channel
		search = re.search(ReRoomName, raw)
		if search:
			self._generated_via_channel = search.group(1)

	# funcs
	def foundInChannels(self, cls:"OsuClient") -> List["OsuChannel"]:
		"""
		Returns a list of channels this user is currently in,
		requires you to give this function the Client class, don't ask why...
		Like this:
		```
		async def onUserJoin(self, NewChan, SomeUser):
			channels_a_user_is_in = SomeUser.foundInChannels(self)
			print(f"{SomeUser.name} is now in {len(channels_a_user_is_in)} different channels")
		```
		"""

		ret:List["OsuChannel"] = []

		for channel_name in self.found_in:

			Ch:"OsuChannel" = cls.channels.get(channel_name, None)
			if Ch: ret.append(Ch)

		return ret

	async def sendMessage(self, cls:"OsuClient", content:str) -> None:
		"""
		Send a message to the channel,
		requires you to give this function the Client class, don't ask why...

		this is basicly an alternative to:
		cls.sendPM(User.name, content)

		makes you think... is this even faster? i dunno, adding it anyways LULW
		"""
		return await cls.sendPM(self.name, content)

	# props
	@property
	def name(self) -> str:
		return str(self._name or "")
